name: Git Functional Tests

env:
  DEBUG_WITH_TMATE: false
  SCALAR_TEST_SKIP_VSTS_INFO: true

on:
  push:
    branches: [ vfs-*, tentative/vfs-*, test-* ]
  pull_request:
    branches: [ vfs-*, features/* ]

jobs:
  scalar:
    name: "Git Functional Tests"

    strategy:
      fail-fast: false
      matrix:
        # Order by runtime (in descending order)
        os: [windows-2019, macos-10.15, ubuntu-18.04, ubuntu-20.04]
        features: [ignored]
        exclude:
          # The built-in FSMonitor is not (yet) supported on Linux
          - os: ubuntu-18.04
            features: experimental
          - os: ubuntu-20.04
            features: experimental
    runs-on: ${{ matrix.os }}

    env:
      GIT_FORCE_UNTRACKED_CACHE: 1

    steps:
      - name: Check out Git's source code
        uses: actions/checkout@v2

      - name: Setup build tools on Windows
        if: runner.os == 'Windows'
        uses: git-for-windows/setup-git-for-windows-sdk@v1

      - name: Provide a minimal `install` on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          test -x /usr/bin/install ||
          tr % '\t' >/usr/bin/install <<-\EOF
          #!/bin/sh

          cmd=cp
          while test $# != 0
          do
          %case "$1" in
          %-d) cmd="mkdir -p";;
          %-m) shift;; # ignore mode
          %*) break;;
          %esac
          %shift
          done

          exec $cmd "$@"
          EOF

      - name: Install build dependencies for Git (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -q -y install libssl-dev libcurl4-openssl-dev gettext

      - name: Build and install Git
        shell: bash
        env:
          NO_TCLTK: Yup
        run: |
          # We do require a VFS version
          def_ver="$(sed -n 's/DEF_VER=\(.*vfs.*\)/\1/p' GIT-VERSION-GEN)"
          test -n "$def_ver"

          # Ensure that `git version` reflects DEF_VER
          case "$(git describe --match "v[0-9]*vfs*" HEAD)" in
          ${def_ver%%.vfs.*}.vfs.*) ;; # okay, we can use this
          *) git -c user.name=ci -c user.email=ci@github tag -m for-testing ${def_ver}.NNN.g$(git rev-parse --short HEAD);;
          esac

          SUDO=
          extra=
          case "${{ runner.os }}" in
          Windows)
            extra=DESTDIR=/c/Progra~1/Git
            cygpath -aw "/c/Program Files/Git/cmd" >>$GITHUB_PATH
            ;;
          Linux)
            SUDO=sudo
            extra=prefix=/usr
            ;;
          macOS)
            SUDO=sudo
            extra=prefix=/usr/local
            ;;
          esac

          $SUDO make -j5 $extra install

      - name: Ensure that we use the built Git and Scalar
        shell: bash
        run: |
          type -p git
          git version
          case "$(git version)" in *.vfs.*) echo Good;; *) exit 1;; esac
          type -p scalar
          scalar version
          case "$(scalar version 2>&1)" in *.vfs.*) echo Good;; *) exit 1;; esac

      - name: Configure feature.scalar
        run: git config --global feature.scalar ${{ matrix.features }}

      - id: functional_test
        name: Functional test
        timeout-minutes: 60
        shell: bash
        run: |
          cd t/functional &&
          prove -j8 f[0-9]*.sh

      - name: Force-stop FSMonitor daemons and Git processes (Windows)
        if: runner.os == 'Windows' && (success() || failure())
        shell: bash
        run: |
          set -x
          wmic process get CommandLine,ExecutablePath,HandleCount,Name,ParentProcessID,ProcessID
          wmic process where "CommandLine Like '%fsmonitor--daemon %run'" delete
          wmic process where "ExecutablePath Like '%git.exe'" delete

      # The GitHub Action `action-tmate` allows developers to connect to the running agent
      # using SSH (it will be a `tmux` session; on Windows agents it will be inside the MSYS2
      # environment in `C:\msys64`, therefore it can be slightly tricky to interact with
      # Git for Windows, which runs a slightly incompatible MSYS2 runtime).
      - name: action-tmate
        if: env.DEBUG_WITH_TMATE == 'true' && failure()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
